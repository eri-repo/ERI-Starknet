// <!DOCTYPE html>
// <html lang="en">
// <head>
//   <meta charset="UTF-8">
//   <meta name="viewport" content="width=device-width, initial-scale=1.0">
//   <title>Starknet Authenticity Frontend</title>
//   <script src="https://cdn.tailwindcss.com"></script>
// </head>
// <body>
//   <div id="root"></div>
//   <script type="module">
//     import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';
//     import ReactDOM from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';
//     import { Provider, Contract, Account, constants, ec, validateAndParseAddress } from 'https://cdn.jsdelivr.net/npm/starknet@6.11.0/+esm';

//     const App = () => {
//       const [account, setAccount] = useState(null);
//       const [contract, setContract] = useState(null);
//       const [manufacturerName, setManufacturerName] = useState('');
//       const [certificate, setCertificate] = useState({
//         name: '', unique_id: '', serial: '', date: '', owner: '', metadata: ''
//       });
//       const [signature, setSignature] = useState({ r: '', s: '' });
//       const [result, setResult] = useState('');
//       const [error, setError] = useState('');

//       // Contract details
//       const contractAddress = '0xYOUR_CONTRACT_ADDRESS'; // Replace with your deployed contract address
//       const abi = [
//         {
//           "type": "function",
//           "name": "manufacturer_registers",
//           "inputs": [{ "name": "manufacturer_name", "type": "felt252" }],
//           "outputs": [],
//           "state_mutability": "external"
//         },
//         {
//           "type": "function",
//           "name": "verify_signature",
//           "inputs": [
//             { "name": "certificate", "type": "(felt252, felt252, felt252, u64, core::starknet::contract_address::ContractAddress, core::array::Array::<felt252>)" },
//             { "name": "signature", "type": "(felt252, felt252)" }
//           ],
//           "outputs": [{ "type": "bool" }],
//           "state_mutability": "view"
//         },
//         {
//           "type": "function",
//           "name": "user_claim_ownership",
//           "inputs": [
//             { "name": "certificate", "type": "(felt252, felt252, felt252, u64, core::starknet::contract_address::ContractAddress, core::array::Array::<felt252>)" },
//             { "name": "signature", "type": "(felt252, felt252)" }
//           ],
//           "outputs": [],
//           "state_mutability": "external"
//         },
//         {
//           "type": "function",
//           "name": "get_manufacturer",
//           "inputs": [{ "name": "user_address", "type": "core::starknet::contract_address::ContractAddress" }],
//           "outputs": [{ "type": "(core::starknet::contract_address::ContractAddress, felt252, bool, u64)" }],
//           "state_mutability": "view"
//         }
//       ];

//       // Initialize provider and contract
//       useEffect(() => {
//         const provider = new Provider({ rpc: { nodeUrl: 'https://starknet-sepolia.g.alchemy.com/starknet/version/rpc/v0_8/PP5-km-xd8s0Ui0FrVxyBSEfD_UhS0e9' } });
//         const contractInstance = new Contract(abi, contractAddress, provider);
//         setContract(contractInstance);
//       }, []);

//       // Connect wallet
//       const connectWallet = async () => {
//         try {
//           const wallet = await window.starknet_burner?.enable({ starknetVersion: 'v5' }) || window.starknet;
//           if (!wallet) throw new Error('No wallet found. Install Argent X or Braavos.');
//           const account = new Account(wallet.provider, wallet.selectedAddress, wallet.signer);
//           setAccount(account);
//           setContract(prev => ({ ...prev, account }));
//           setResult(`Connected: ${wallet.selectedAddress}`);
//         } catch (err) {
//           setError(`Wallet connection failed: ${err.message}`);
//         }
//       };

//       // Register manufacturer
//       const registerManufacturer = async () => {
//         if (!account || !contract) return setError('Connect wallet first');
//         try {
//           const call = await contract.manufacturer_registers(manufacturerName);
//           await account.execute(call);
//           setResult(`Manufacturer registered: ${manufacturerName}`);
//         } catch (err) {
//           setError(`Registration failed: ${err.message}`);
//         }
//       };

//       // Verify signature
//       const verifySignature = async () => {
//         if (!contract) return setError('Contract not initialized');
//         try {
//           const metadataArray = certificate.metadata.split(',').map(item => item.trim()).filter(item => item);
//           const cert = [
//             certificate.name,
//             certificate.unique_id,
//             certificate.serial,
//             parseInt(certificate.date) || 0,
//             validateAndParseAddress(certificate.owner),
//             metadataArray
//           ];
//           const sig = [signature.r, signature.s];
//           const { result: isValid } = await contract.verify_signature(cert, sig);
//           setResult(`Signature valid: ${isValid}`);
//         } catch (err) {
//           setError(`Verification failed: ${err.message}`);
//         }
//       };

//       // Claim ownership
//       const claimOwnership = async () => {
//         if (!account || !contract) return setError('Connect wallet first');
//         try {
//           const metadataArray = certificate.metadata.split(',').map(item => item.trim()).filter(item => item);
//           const cert = [
//             certificate.name,
//             certificate.unique_id,
//             certificate.serial,
//             parseInt(certificate.date) || 0,
//             validateAndParseAddress(certificate.owner),
//             metadataArray
//           ];
//           const sig = [signature.r, signature.s];
//           const call = await contract.user_claim_ownership(cert, sig);
//           await account.execute(call);
//           setResult('Ownership claimed successfully');
//         } catch (err) {
//           setError(`Ownership claim failed: ${err.message}`);
//         }
//       };

//       // Get manufacturer details
//       const getManufacturer = async () => {
//         if (!contract || !certificate.owner) return setError('Enter manufacturer address');
//         try {
//           const { result: [addr, name, isRegistered, timestamp] } = await contract.get_manufacturer(certificate.owner);
//           setResult(`Manufacturer: Address=${addr}, Name=${name}, Registered=${isRegistered}, Timestamp=${timestamp}`);
//         } catch (err) {
//           setError(`Failed to fetch manufacturer: ${err.message}`);
//         }
//       };

//       return (
//         <div className="min-h-screen bg-gray-100 flex flex-col items-center p-4">
//           <h1 className="text-3xl font-bold mb-6">Starknet Authenticity</h1>
//           <button
//             onClick={connectWallet}
//             className="bg-blue-500 text-white px-4 py-2 rounded mb-4 hover:bg-blue-600"
//           >
//             {account ? `Connected: ${account.address.slice(0, 6)}...` : 'Connect Wallet'}
//           </button>

//           {/* Manufacturer Registration */}
//           <div className="w-full max-w-md bg-white p-6 rounded shadow mb-6">
//             <h2 className="text-xl font-semibold mb-4">Register Manufacturer</h2>
//             <input
//               type="text"
//               placeholder="Manufacturer Name"
//               value={manufacturerName}
//               onChange={(e) => setManufacturerName(e.target.value)}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <button
//               onClick={registerManufacturer}
//               className="w-full bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
//             >
//               Register
//             </button>
//           </div>

//           {/* Certificate and Signature Form */}
//           <div className="w-full max-w-md bg-white p-6 rounded shadow">
//             <h2 className="text-xl font-semibold mb-4">Certificate & Signature</h2>
//             <input
//               type="text"
//               placeholder="Certificate Name"
//               value={certificate.name}
//               onChange={(e) => setCertificate({ ...certificate, name: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <input
//               type="text"
//               placeholder="Unique ID"
//               value={certificate.unique_id}
//               onChange={(e) => setCertificate({ ...certificate, unique_id: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <input
//               type="text"
//               placeholder="Serial"
//               value={certificate.serial}
//               onChange={(e) => setCertificate({ ...certificate, serial: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <input
//               type="text"
//               placeholder="Date (Unix timestamp)"
//               value={certificate.date}
//               onChange={(e) => setCertificate({ ...certificate, date: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <input
//               type="text"
//               placeholder="Owner Address"
//               value={certificate.owner}
//               onChange={(e) => setCertificate({ ...certificate, owner: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <input
//               type="text"
//               placeholder="Metadata (comma-separated)"
//               value={certificate.metadata}
//               onChange={(e) => setCertificate({ ...certificate, metadata: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <input
//               type="text"
//               placeholder="Signature R"
//               value={signature.r}
//               onChange={(e) => setSignature({ ...signature, r: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <input
//               type="text"
//               placeholder="Signature S"
//               value={signature.s}
//               onChange={(e) => setSignature({ ...signature, s: e.target.value })}
//               className="w-full p-2 border rounded mb-2"
//             />
//             <div className="flex space-x-2">
//               <button
//                 onClick={verifySignature}
//                 className="flex-1 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
//               >
//                 Verify Signature
//               </button>
//               <button
//                 onClick={claimOwnership}
//                 className="flex-1 bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600"
//               >
//                 Claim Ownership
//               </button>
//               <button
//                 onClick={getManufacturer}
//                 className="flex-1 bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
//               >
//                 Get Manufacturer
//               </button>
//             </div>
//           </div>

//           {/* Results and Errors */}
//           {result && <p className="mt-4 text-green-600">{result}</p>}
//           {error && <p className="mt-4 text-red-600">{error}</p>}
//         </div>
//       );
//     };

//     ReactDOM.render(<App />, document.getElementById('root'));
//   </script>
// </body>
// </html>


// //=====================================================

// import { useState } from "react";
// import { shortString, num, stark } from "starknet";
// import { useStarknetInvoke, useStarknetAccount } from "@starknet-react/core";
// import { Contract } from "starknet";
// import abi from "../abi/Authenticity.json";

// const CONTRACT_ADDRESS = "0xYOUR_CONTRACT_ADDRESS"; // replace with your deployed address

// export default function RegisterAndClaim() {
//   const { account } = useStarknetAccount();
//   const contract = new Contract(abi, CONTRACT_ADDRESS, account);

//   const [username, setUsername] = useState("");
//   const [certificate, setCertificate] = useState({
//     name: "",
//     unique_id: "",
//     serial: "",
//     date: 0,
//     metadata: [],
//   });
//   const [signature, setSignature] = useState({ r: "", s: "" });

//   const registerManufacturer = async () => {
//     try {
//       const feltName = shortString.encodeShortString(username);
//       await contract.invoke("manufacturer_registers", [feltName]);
//     } catch (err) {
//       console.error(err);
//     }
//   };

//   const claimOwnership = async () => {
//     try {
//       const cert = certificate;
//       const certStruct = [
//         shortString.encodeShortString(cert.name),
//         num.toBigInt(cert.unique_id),
//         num.toBigInt(cert.serial),
//         BigInt(cert.date),
//         stark.uint256ToBN(account.address),
//         [
//           ...cert.metadata.map((m) => num.toBigInt(m)),
//         ]
//       ];

//       const sig = [num.toBigInt(signature.r), num.toBigInt(signature.s)];

//       await contract.invoke("user_claim_ownership", [certStruct, sig]);
//     } catch (err) {
//       console.error(err);
//     }
//   };

//   return (
//     <div className="p-6 max-w-xl mx-auto">
//       <h1 className="text-xl font-bold mb-4">Starknet Authenticity Interface</h1>

//       <div className="mb-6">
//         <h2 className="text-lg font-semibold">Register Manufacturer</h2>
//         <input
//           type="text"
//           className="border p-2 w-full"
//           placeholder="Username"
//           value={username}
//           onChange={(e) => setUsername(e.target.value)}
//         />
//         <button onClick={registerManufacturer} className="mt-2 bg-blue-600 text-white px-4 py-2 rounded">
//           Register
//         </button>
//       </div>

//       <div>
//         <h2 className="text-lg font-semibold">Claim Ownership</h2>
//         <input
//           className="border p-2 w-full mb-2"
//           placeholder="Name"
//           onChange={(e) => setCertificate({ ...certificate, name: e.target.value })}
//         />
//         <input
//           className="border p-2 w-full mb-2"
//           placeholder="Unique ID"
//           onChange={(e) => setCertificate({ ...certificate, unique_id: e.target.value })}
//         />
//         <input
//           className="border p-2 w-full mb-2"
//           placeholder="Serial"
//           onChange={(e) => setCertificate({ ...certificate, serial: e.target.value })}
//         />
//         <input
//           className="border p-2 w-full mb-2"
//           placeholder="Date (timestamp)"
//           type="number"
//           onChange={(e) => setCertificate({ ...certificate, date: Number(e.target.value) })}
//         />
//         <input
//           className="border p-2 w-full mb-2"
//           placeholder="Metadata (comma separated)"
//           onChange={(e) =>
//             setCertificate({
//               ...certificate,
//               metadata: e.target.value.split(",").map((v) => v.trim()),
//             })
//           }
//         />
//         <input
//           className="border p-2 w-full mb-2"
//           placeholder="Signature R"
//           onChange={(e) => setSignature({ ...signature, r: e.target.value })}
//         />
//         <input
//           className="border p-2 w-full mb-2"
//           placeholder="Signature S"
//           onChange={(e) => setSignature({ ...signature, s: e.target.value })}
//         />
//         <button onClick={claimOwnership} className="mt-2 bg-green-600 text-white px-4 py-2 rounded">
//           Claim Ownership
//         </button>
//       </div>
//     </div>
//   );
// }
